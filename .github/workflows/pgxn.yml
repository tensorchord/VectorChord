# workflows/pgxn.yml
#
# Publish vchord (PGXN)
# Build and publish the vchord extension to the PostgreSQL Extension Network (PGXN). This
# workflow is gets triggered on a new release creation or manually via the GitHub UI. 

name: Publish vchord to PGXN

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag:
        description: "tag name (semver without v-prefix)"
        required: true
        type: string

jobs:
  semver:
    runs-on: "ubuntu-latest"

    steps:
      - name: Semver
        id: semver
        uses: actions/github-script@v7
        with:
          script: |
            const tag = "${{ github.event.inputs.tag }}" || "${{ github.event.release.tag_name }}";
            console.log(`Tag: ${tag}`);
            const r = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
            if (!r.test(tag)) {
              core.setFailed(`Action failed with an invalid semver.`);
            }
            core.setOutput('SEMVER', tag);

    outputs:
      SEMVER: ${{ steps.semver.outputs.SEMVER }}

  publish:
    name: Publish to PGXN
    runs-on: ubuntu-latest
    needs: ["semver"]
    env:
        DISTNAME: vchord
        DISTVERSION: ${{ needs.semver.outputs.SEMVER }}

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Bundle the Release
        run: |
            # Create a PGXN-compatible zip file.
            sed -e "s/@DISTVERSION@/${DISTVERSION}/g" META.json.in > META.json
            # Create the build directory
            mkdir -p ./build
            # Output the archive to ./build/ and use DISTNAME--DISTVERSION.zip
            git archive --format zip --prefix "${DISTNAME}-${DISTVERSION}/" --add-file META.json -o "./build/${DISTNAME}--${DISTVERSION}.zip" HEAD
            echo "Release bundle created: ./build/${DISTNAME}--${DISTVERSION}.zip"

      - name: Release on PGXN
        env:
          PGXN_USERNAME: ${{ secrets.PGXN_USERNAME }}
          PGXN_PASSWORD: ${{ secrets.PGXN_PASSWORD }}
        run: |
          # DISTNAME and DISTVERSION are available from the job's env context
          ARCHIVE_PATH="./build/${DISTNAME}--${DISTVERSION}.zip"
          echo "Uploading ${ARCHIVE_PATH} to PGXN..."
          curl --fail -sS \
            --user "${PGXN_USERNAME}:${PGXN_PASSWORD}" \
            -F "submit=Release It!" \
            -F "archive=@${ARCHIVE_PATH}" \
            -H "X-Requested-With: XMLHttpRequest" \
            https://manager.pgxn.org/upload
